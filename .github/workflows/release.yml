name: "Auto Release from Markdown"
on:
  push:
    tags:
      - "*"

jobs:
  create_release:
    name: "Create Release from Markdown"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get release information from markdown
        id: release_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          # Check if release info file exists
          if [ ! -f ".github/releases/release-info.md" ]; then
            echo "‚ùå Error: Release info file not found!"
            echo "Expected: .github/releases/release-info.md"
            ls -la .github/releases/ || echo "Directory .github/releases/ does not exist"
            exit 1
          fi

          # Debug: Show the markdown file content with line numbers
          echo "üìã Release info markdown content (with line numbers):"
          echo "--- START RELEASE INFO ---"
          cat -n .github/releases/release-info.md
          echo "--- END RELEASE INFO ---"

          # Extract frontmatter values with better parsing
          RELEASE_TAG=$(sed -n '/^tag:/p' .github/releases/release-info.md | cut -d':' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          RELEASE_NAME=$(sed -n '/^name:/p' .github/releases/release-info.md | cut -d':' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          IS_PRERELEASE=$(sed -n '/^prerelease:/p' .github/releases/release-info.md | cut -d':' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          IS_DRAFT=$(sed -n '/^draft:/p' .github/releases/release-info.md | cut -d':' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Debug: Show extracted frontmatter
          echo "üîç Extracted frontmatter:"
          echo "  Tag: '$RELEASE_TAG'"
          echo "  Name: '$RELEASE_NAME'"
          echo "  Prerelease: '$IS_PRERELEASE'"
          echo "  Draft: '$IS_DRAFT'"

          # Extract release body (everything after the closing ---)
          # Find the line number of the second ---
          FRONTMATTER_END=$(grep -n '^---$' .github/releases/release-info.md | sed -n '2p' | cut -d':' -f1)

          echo "üîç Frontmatter ends at line: $FRONTMATTER_END"

          if [ -n "$FRONTMATTER_END" ]; then
            # Extract everything after the frontmatter
            RELEASE_BODY=$(tail -n +$((FRONTMATTER_END + 1)) .github/releases/release-info.md)
            
            # Remove leading empty lines
            RELEASE_BODY=$(echo "$RELEASE_BODY" | sed '/./,$!d')
          else
            echo "‚ùå Error: Could not find frontmatter end marker"
            RELEASE_BODY=""
          fi

          # Debug: Show extracted body
          echo "üìã Extracted release body:"
          echo "--- START RELEASE BODY ---"
          echo "$RELEASE_BODY"
          echo "--- END RELEASE BODY ---"
          echo "üìè Release body length: ${#RELEASE_BODY}"

          # Set outputs
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "is_draft=$IS_DRAFT" >> $GITHUB_OUTPUT

          # Handle multiline release body
          {
            echo 'release_body<<EOF'
            echo "$RELEASE_BODY"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

          # Validate required fields
          if [ -z "$RELEASE_NAME" ]; then
            echo "‚ùå Error: Release name is empty!"
            exit 1
          fi

          if [ -z "$RELEASE_BODY" ]; then
            echo "‚ö†Ô∏è  Warning: Release body is empty!"
            echo "This might indicate a parsing issue."
          fi

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Creating release..."
          echo "üìù Tag: ${{ steps.release_info.outputs.tag_name }}"
          echo "üè∑Ô∏è Title: ${{ steps.release_info.outputs.release_name }}"
          echo "üîñ Prerelease: ${{ steps.release_info.outputs.is_prerelease }}"
          echo "üìÑ Draft: ${{ steps.release_info.outputs.is_draft }}"

          # Debug: Show the release body that will be used
          echo "üìã Release body to be used:"
          echo "--- START BODY FOR RELEASE ---"
          echo "${{ steps.release_info.outputs.release_body }}"
          echo "--- END BODY FOR RELEASE ---"

          # Build the gh release create command
          RELEASE_ARGS=""

          # Add prerelease flag if needed
          if [ "${{ steps.release_info.outputs.is_prerelease }}" = "true" ]; then
            RELEASE_ARGS="$RELEASE_ARGS --prerelease"
          fi

          # Add draft flag if needed
          if [ "${{ steps.release_info.outputs.is_draft }}" = "true" ]; then
            RELEASE_ARGS="$RELEASE_ARGS --draft"
          fi

          # Create the release with explicit body handling
          if [ -n "${{ steps.release_info.outputs.release_body }}" ]; then
            echo "üìù Creating release with body content..."
            gh release create "${{ steps.release_info.outputs.tag_name }}" \
              --title "${{ steps.release_info.outputs.release_name }}" \
              --notes "${{ steps.release_info.outputs.release_body }}" \
              $RELEASE_ARGS
          else
            echo "‚ö†Ô∏è  Creating release without body (empty)..."
            gh release create "${{ steps.release_info.outputs.tag_name }}" \
              --title "${{ steps.release_info.outputs.release_name }}" \
              --notes "Release ${{ steps.release_info.outputs.tag_name }}" \
              $RELEASE_ARGS
          fi

          echo "‚úÖ Successfully created release from markdown file"
          echo "üîó View release at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.tag_name }}"

      - name: Cleanup release info file
        run: |
          # Remove the release info file after successful release creation
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git rm .github/releases/release-info.md
          git commit -m "Remove release info file after creating release ${{ steps.release_info.outputs.tag_name }}"
          git push origin main
        continue-on-error: true
